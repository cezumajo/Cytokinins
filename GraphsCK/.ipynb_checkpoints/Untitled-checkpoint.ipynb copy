{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import pylab as plt\n",
    "import seaborn as sns\n",
    "from scipy import stats\n",
    "import glob\n",
    "import scipy.stats as st\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib.colors import LogNorm\n",
    "from scipy.stats import ttest_ind\n",
    "from statannot import add_stat_annotation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('EmbryoCk.xlsx',sep='\\t') #load dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Type</th>\n",
       "      <th>Day</th>\n",
       "      <th>Embryo</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>255</th>\n",
       "      <td>ahk4</td>\n",
       "      <td>4</td>\n",
       "      <td>GLOBULAR EARLY</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>256</th>\n",
       "      <td>ahk4</td>\n",
       "      <td>6</td>\n",
       "      <td>TRIANGULAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>257</th>\n",
       "      <td>ahk4</td>\n",
       "      <td>6</td>\n",
       "      <td>TRIANGULAR</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>ahk4</td>\n",
       "      <td>6</td>\n",
       "      <td>GLOBULAR LATE</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>259</th>\n",
       "      <td>ahk4</td>\n",
       "      <td>6</td>\n",
       "      <td>GLOBULAR LATE</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Type  Day          Embryo\n",
       "255  ahk4    4  GLOBULAR EARLY\n",
       "256  ahk4    6      TRIANGULAR\n",
       "257  ahk4    6      TRIANGULAR\n",
       "258  ahk4    6   GLOBULAR LATE\n",
       "259  ahk4    6   GLOBULAR LATE"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.tail()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df.set_index(['Type', 'Day'], inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                   Embryo  freq_count\n",
      "Type  Day                            \n",
      "Col-0 2            2-CELL        39.0\n",
      "      2            4-CELL        31.0\n",
      "      2            4-CELL        31.0\n",
      "      2            2-CELL        39.0\n",
      "      2            2-CELL        39.0\n",
      "...                   ...         ...\n",
      "ahk4  4    GLOBULAR EARLY        29.0\n",
      "      6        TRIANGULAR        24.0\n",
      "      6        TRIANGULAR        24.0\n",
      "      6     GLOBULAR LATE        34.0\n",
      "      6     GLOBULAR LATE        34.0\n",
      "\n",
      "[260 rows x 2 columns]\n"
     ]
    }
   ],
   "source": [
    "#df1 = df['Embryo'].value_counts()\n",
    "#df1 = df.Embryo.value_counts\n",
    "\n",
    "df['freq_count'] = df.groupby('Embryo')['Embryo'].transform('count')\n",
    "\n",
    "\n",
    "print(df)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 936x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "\n",
    "sns.color_palette()\n",
    "sns.color_palette(\"colorblind\")\n",
    "\n",
    "df_pivot = pd.pivot_table(\n",
    "    df,\n",
    "    values='freq_count',\n",
    "    index=['Type', 'Day'],\n",
    "    columns='Embryo')\n",
    "\n",
    "# Plot a bar chart using the DF\n",
    "ax = df_pivot.plot(kind=\"bar\", width=0.6, align='center', stacked=True, rot=0)\n",
    "# Get a Matplotlib figure from the axes object for formatting purposes\n",
    "fig = ax.get_figure()\n",
    "\n",
    "# Change the plot dimensions (width, height)\n",
    "fig.set_size_inches(13, 5)\n",
    "# Change the axes labels\n",
    "#ax.set_xlabel(\"Day\")\n",
    "ax.set_ylabel(\"Embryo frequency\")\n",
    "\n",
    "\n",
    "\n",
    "#ax.update_layout(barmode='group', bargap=0.30,bargroupgap=0.0)\n",
    "#fig.show()\n",
    "\n",
    "\n",
    "# Use this to show the plot in a new window\n",
    "# plt.show()\n",
    "# Export the plot as a PNG file\n",
    "ax.legend(bbox_to_anchor=(1.02, 1), loc='upper left', borderaxespad=0)\n",
    "fig.savefig(\"EmbryoCK_barplot.png\", dpi=300, bbox_inches='tight')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
